name: QA

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - dev
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: depot-ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
      - name: Run Ruff
        run: uv run --no-sync --with ruff ruff check

  format:
    runs-on: depot-ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
      - name: Run Ruff
        run: uv run --no-sync --with ruff ruff format --check

  typecheck:
    runs-on: depot-ubuntu-latest
    env:
      UV_PYTHON_PREFERENCE: only-system
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      - uses: nicknovitski/nix-develop@v1
      - name: Sync dependencies
        run: uv python pin 3.10 && uv sync --all-extras --all-groups
      # - name: Replace bundled Node.js with Nix Node.js
      #   run: |
      #     # Find the bundled node binary and replace it with Nix's node
      #     BUNDLED_NODE=$(find .venv/lib/python3.10/site-packages/nodejs_wheel/bin -name "node" -type f 2>/dev/null || true)
      #     if [ -n "$BUNDLED_NODE" ]; then
      #       rm -f "$BUNDLED_NODE"
      #       ln -s "$(which node)" "$BUNDLED_NODE"
      #       echo "Replaced bundled node with Nix node: $(which node)"
      #     fi
      - name: Run Basedpyright
        run: uv run basedpyright --level error
      # - name: Cleanup nix environment
      #   if: always()
      #   run: bash .github/scripts/cleanup-nix-env.sh

  test:
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: depot-ubuntu-latest
    env:
      UV_PYTHON_PREFERENCE: only-system
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      - uses: nicknovitski/nix-develop@v1
        with:
           # use devshell for Python 3.10
          arguments: "'.#\"python${{ matrix.python-version }}\"'"
      - name: Sync dependencies
        run: uv python pin ${{ matrix.python-version }} && uv sync --all-extras --all-groups
      - name: Run Tests
        id: pytest
        continue-on-error: true
        run: uv run pytest --verbose --cov=src/metaxy --cov-report=term-missing --cov-report=xml --durations=10

      # without this cleanup, tools not using Nix may fail if they e.g. try to use nix-provided git
      # - name: Cleanup nix environment
      #   if: always()
      #   run: bash .github/scripts/cleanup-nix-env.sh
      - name: Coverage comment
        if: matrix.python-version == '3.10' && github.event_name == 'pull_request'
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./coverage.xml
          title: Coverage Report
          badge-title: Coverage
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_ORANGE: 70
      - name: Check Tests Status
        if: steps.pytest.outcome == 'failure'
        run: exit 1

  docs:
    runs-on: depot-ubuntu-latest
    env:
      UV_PYTHON_PREFERENCE: only-system
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      - uses: nicknovitski/nix-develop@v1
      - name: Sync dependencies
        run: uv python pin ${{ matrix.python-version }} && uv sync --all-extras --all-groups
      - name: Build Docs
        id: docs
        run: uv run mkdocs build --strict
      # # without this cleanup, tools not using Nix may fail if they e.g. try to use nix-provided git
      # - name: Cleanup nix environment
      #   if: always()
      #   run: bash .github/scripts/cleanup-nix-env.sh

  check:
    if: always()
    runs-on: depot-ubuntu-latest
    needs:
      - test
      - typecheck
      - lint
      - format
      - docs

    steps:
      - name: All Green
        if: always()
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
