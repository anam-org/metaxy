name: QA

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - dev
  pull_request:
  workflow_dispatch:

jobs:
  filter:
    runs-on: depot-ubuntu-latest
    outputs:
      test: ${{ steps.filter.outputs.test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            test:
              - .github/workflows/QA.yml
              - flake.nix
              - flake.lock
              - 'src/metaxy/**'
              - 'tests/**'
              - 'pyproject.toml'
              - 'uv.lock'

  lint:
    runs-on: depot-ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
      - name: Run Ruff
        run: uv run --no-sync --with ruff ruff check

  format:
    runs-on: depot-ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
      - uses: dprint/check@v2.3
        with:
          dprint-version: 0.50.2

  # typecheck:
  #   runs-on: depot-ubuntu-latest
  #   env:
  #     UV_PYTHON_PREFERENCE: only-system
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Install Nix
  #       uses: cachix/install-nix-action@v27
  #       with:
  #         nix_path: nixpkgs=channel:nixpkgs-unstable
  #     - name: Setup Magic Nix Cache
  #       uses: DeterminateSystems/magic-nix-cache-action@v8
  #     - uses: nicknovitski/nix-develop@v1
  #     - name: Sync dependencies
  #       run: uv python pin 3.10 && uv sync --all-extras --all-groups
  #     - name: Replace bundled Node.js with Nix Node.js
  #       run: |
  #         # Find the bundled node binary and replace it with Nix's node
  #         BUNDLED_NODE=$(find .venv/lib/python3.10/site-packages/nodejs_wheel/bin -name "node" -type f 2>/dev/null || true)
  #         if [ -n "$BUNDLED_NODE" ]; then
  #           rm -f "$BUNDLED_NODE"
  #           ln -s "$(which node)" "$BUNDLED_NODE"
  #           echo "Replaced bundled node with Nix node: $(which node)"
  #         fi
  #     - name: Run Basedpyright
  #       run: uv run basedpyright --level error
  #     - name: Cleanup nix environment
  #       if: always()
  #       run: bash .github/scripts/cleanup-nix-env.sh

  test:
    needs: filter
    if: ${{ needs.filter.outputs.test == 'true' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: depot-ubuntu-latest
    env:
      UV_PYTHON_PREFERENCE: only-system
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Save original environment
        run: bash .github/scripts/save-env.sh
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      - uses: nicknovitski/nix-develop@v1
        with:
           # use devshell for Python 3.10
          arguments: "'.#\"python${{ matrix.python-version }}\"'"
      - name: Install Dependencies
        run: uv python pin ${{ matrix.python-version }} && uv sync --all-extras --all-groups
      - name: Run Tests
        id: pytest
        run: >
          uv run pytest
          --cov=src/metaxy
          --cov-report=term-missing
          --cov-report=xml
          --durations=10
          --junit-xml=./junit.xml

      # Restore original environment to prevent Nix tools from interfering with subsequent steps
      - name: Restore Original Environment After Nix
        if: always()
        run: bash .github/scripts/restore-env.sh


      # TODO: run this for the entire matrix. The current action doesn't support making a single comment for all matrix jobs
      - name: Test Execution Summary
        # GitHub actions are horrible, always() here is used to ensure the step runs even if previous steps fail
        if: ${{ always() && matrix.python-version == '3.10' && github.event_name == 'pull_request' }}
        uses: pmeier/pytest-results-action@main
        with:
          # A list of JUnit XML files, directories containing the former, and wildcard
          # patterns to process.
          # See @actions/glob for supported patterns.
          path: ./junit.xml
          # (Optional) Add a summary of the results at the top of the report
          summary: true
          # (Optional) Select which results should be included in the report.
          # Follows the same syntax as `pytest -r`
          display-options: fEX
          # (Optional) Fail the workflow if no JUnit XML was found.
          fail-on-empty: true
          # (Optional) Title of the test results section in the workflow summary
          title: Test Results (Python ${{ matrix.python-version }})

      - name: Coverage Report
        # GitHub actions are horrible, always() here is used to ensure the step runs even if previous steps fail
        # Only run on pull requests since this action creates comments
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-xml-coverage-path: ./coverage.xml
          title: Coverage Report (Python ${{ matrix.python-version }})
          badge-title: Coverage
          github-token: ${{ github.token }}
          junitxml-path: ./junit.xml
          xml-skip-covered: true
          unique-id-for-comment: ${{ matrix.python-version }}

  docs:
    runs-on: depot-ubuntu-latest
    env:
      UV_PYTHON_PREFERENCE: only-system
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Save original environment
        run: bash .github/scripts/save-env.sh
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      - uses: nicknovitski/nix-develop@v1
      - name: Sync dependencies
        run: uv python pin ${{ matrix.python-version }} && uv sync --all-extras --all-groups
      - name: Build Docs
        id: docs
        run: uv run mkdocs build --strict
      # Restore original environment to prevent Nix tools from interfering with subsequent steps
      - name: Restore original environment
        if: always()
        run: bash .github/scripts/restore-env.sh

  check:
    if: always()
    runs-on: depot-ubuntu-latest
    needs:
      - test
      - lint
      - format
      - docs

    steps:
      - name: All Green
        if: always()
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: test
