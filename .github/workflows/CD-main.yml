name: Deploy Documentation

# Trigger on push to main branch or manual dispatch
on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: "pages"
  cancel-in-progress: true  # Cancel previous deployments when new one starts

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy-docs:
    runs-on: depot-ubuntu-latest

    # GitHub Pages deployment environment
    environment: github-pages

    env:
      UV_PYTHON_PREFERENCE: only-system
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for Mike to work properly

      - name: Save original environment
        run: bash .github/scripts/save-env.sh

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable

      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Setup Nix development environment
        uses: nicknovitski/nix-develop@v1

      - name: Sync dependencies
        run: |
          uv python pin 3.10
          uv sync --all-extras --all-groups

      - name: Configure Git for Mike
        run: |
          # Configure git user for Mike commits
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch and pull gh-pages branch
        run: |
          # Fetch the gh-pages branch to ensure we have the latest remote state
          git fetch origin gh-pages:gh-pages || true
          # If gh-pages exists remotely, ensure our local copy is up to date
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
            git pull origin gh-pages --rebase
            git checkout -
          fi

      - name: Deploy documentation with Mike
        run: uv run mike deploy --push --ignore-remote-status ${{ github.ref_name }}

      # Restore original environment to prevent Nix tools from interfering
      - name: Restore original environment
        if: always()
        run: bash .github/scripts/restore-env.sh
